#!/bin/env python2.7
# encoding: utf-8
'''
 -- Sample Set Enrichment Analysis (SSEA) --

Assessment of enrichment in a ranked list of quantitative measurements 

@author:     mkiyer
@author:     yniknafs
        
@copyright:  2013 Michigan Center for Translational Pathology. All rights reserved.
        
@license:    GPL2

@contact:    mkiyer@umich.edu
@deffield    updated: Updated
'''
# set matplotlib backend
import matplotlib
matplotlib.use('Agg')

import sys
import os
import argparse
import logging
import shutil
import json
import matplotlib.pyplot as plt

# setup html template environment
from jinja2 import Environment, PackageLoader
env = Environment(loader=PackageLoader("ssea", "templates"))

# setup path to web files
import ssea as _ssea
src_web_path = os.path.join(_ssea.__path__[0], 'web')

# local imports
from ssea.config import Config
from ssea.base import SampleSet, WeightMatrix
from ssea.algo import ssea_run 

__all__ = []
__version__ = 0.1
__date__ = '2013-10-09'
__updated__ = '2013-10-18'

DEBUG = 1
TESTRUN = 0
PROFILE = 1

class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "ERROR: %s" % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def report_config(config):
    # write main json file
    json_data = {'name': args.name,
                 'prog': program_version_message,
                 'perms': perms,
                 'weight_method_miss': args.weight_miss,
                 'weight_method_hit': args.weight_hit,
                 'results': json_data}
    pass

def report_single_test(wobj, res, config):
    eplot_png = '%s.%s.eplot.png' % (wobj.name, res.sample_set.name)
    eplot_pdf = '%s.%s.eplot.pdf' % (wobj.name, res.sample_set.name)
    null_png = '%s.%s.null.png' % (wobj.name, res.sample_set.name)
    null_pdf = '%s.%s.null.pdf' % (wobj.name, res.sample_set.name)            
    details_json = '%s.%s.json' % (wobj.name, res.sample_set.name)
    details_html = '%s.%s.html' % (wobj.name, res.sample_set.name)
    # create enrichment plot
    fig = res.plot(plot_conf_int=config.plot_conf_int,
                   conf_int=config.conf_int)
    fig.savefig(os.path.join(config.output_dir, eplot_png))
    fig.savefig(os.path.join(config.output_dir, eplot_pdf))
    plt.close()
    # create null distribution plot
    fig = res.plot_null_distribution()
    fig.savefig(os.path.join(config.output_dir, null_png))
    fig.savefig(os.path.join(config.output_dir, null_pdf))
    plt.close()
    # create detailed report
    reportdict = res.get_report_json()
    detailsdict = res.get_details_json()
    detailsdict.update({'eplot_png': eplot_png,
                        'eplot_pdf': eplot_pdf,
                        'null_png': null_png,
                        'null_pdf': null_pdf})
    fp = open(os.path.join(config.output_dir, details_json), 'w')
    json.dump(detailsdict, fp)
    fp.close()
    # render to html
    t = env.get_template('details.html')
    fp = open(os.path.join(config.output_dir, details_html), 'w')
    print >>fp, t.render(name=wobj.name, 
                         desc=wobj.desc,
                         report=reportdict,
                         details=detailsdict)
    fp.close()
    # update report dict
    reportdict['details_json'] = details_json
    reportdict['details_html'] = details_html
    return reportdict

def report_single_observation(wobj, results, config):
    # create detailed reports
    jsondict = {'name': wobj.name,
                'desc': wobj.desc}
    reports = []
    for res in results:
        reports.append(report_single_test(wobj, res, config))
    jsondict['reports'] = reports
    # create observation report
    report_json = '%s.json' % (wobj.name)
    fp = open(os.path.join(config.output_dir, report_json), 'w')              
    json.dump(jsondict, fp, indent=2, sort_keys=True)
    fp.close()
    # render to html
    report_html = '%s.html' % (wobj.name)
    t = env.get_template('report.html')
    fp = open(os.path.join(config.output_dir, report_html), 'w')
    print >>fp, t.render(data=jsondict)
    fp.close()
    # update report dict
    jsondict['report_json'] = report_json
    jsondict['report_html'] = report_html    
    return jsondict

def report_meta_sample_set():
    pass

def report_meta_all():
    pass

def ssea_main(config):
    # read sample sets
    logging.info("Reading sample sets")
    sample_sets = []
    for filename in config.smx_files:
        logging.debug("\tFile: %s" % (filename))
        sample_sets.extend(SampleSet.parse_smx(filename))
    for filename in config.smt_files:
        logging.debug("\tFile: %s" % (filename))
        sample_sets.extend(SampleSet.parse_smt(filename))
    logging.info("\tNumber of sample sets: %d" % (len(sample_sets)))
    # setup output directory
    if not os.path.exists(config.output_dir):
        logging.info("Creating output directory '%s'" % (config.output_dir))
        os.makedirs(config.output_dir)
    web_dir = os.path.join(config.output_dir, 'web')
    if not os.path.exists(web_dir):
        logging.info("\tInstalling web files")
        shutil.copytree(src_web_path, web_dir)        
    # parse weight matrix and run main ssea algorithm
    logging.info("Running SSEA")
    for wobj in WeightMatrix.parse_wmt(config.weight_matrix_file):
        logging.info("\tName: %s (%s)" % (wobj.name, wobj.desc))
        results = ssea_run(wobj.samples, wobj.weights, sample_sets, 
                           weight_method_miss=config.weight_miss,
                           weight_method_hit=config.weight_hit,
                           perms=config.perms)
        report_single_observation(wobj, results, config)

def main(argv=None):
    '''Command line options.'''    
    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%s %s (%s)' % (program_name, program_version, program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

  Created by mkiyer and yniknafs on %s.
  Copyright 2013 MCTP. All rights reserved.
  
  Licensed under the GPL
  http://www.gnu.org/licenses/gpl.html
  
  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

    # create instance of run configuration
    config = Config()
    try:
        # Setup argument parser
        parser = argparse.ArgumentParser(description=program_license)
        # Add command line parameters
        config.get_argument_parser(parser)
        parser.add_argument("-v", "--verbose", dest="verbose", 
                            action="store_true", default=False, 
                            help="set verbosity level [default: %(default)s]")
        parser.add_argument('-V', '--version', action='version', 
                            version=program_version_message)
        # Process arguments
        args = parser.parse_args()
        # setup logging
        if DEBUG or (args.verbose > 0):
            level = logging.DEBUG
        else:
            level = logging.INFO
        logging.basicConfig(level=level,
                            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        # initialize configuration
        config.parse_args(parser, args)
        config.log()
        # run
        ssea_main(config)

    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        pass
#     except Exception, e:
#         pass
#         if DEBUG or TESTRUN:
#             raise(e)
#         indent = len(program_name) * " "
#         logging.error(program_name + ": " + repr(e) + "\n")
#         logging.error(indent + "  for help use --help")
#         return 2
    return 0

if __name__ == "__main__":
    if DEBUG:
        pass
    if TESTRUN:
        pass
        #import doctest
        #doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.bin'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())