#!/bin/env python2.7
# encoding: utf-8
'''
 -- Sample Set Enrichment Analysis (SSEA) --

Assessment of enrichment in a ranked list of quantitative measurements 

@author:     mkiyer
@author:     yniknafs
        
@copyright:  2013 Michigan Center for Translational Pathology. All rights reserved.
        
@license:    GPL2

@contact:    mkiyer@umich.edu
@deffield    updated: Updated
'''
import sys
import os
import argparse
import logging

# set matplotlib backend
import matplotlib
matplotlib.use('Agg')

__all__ = []

DEBUG = 1
PROFILE = 0

# local imports
from ssea import __version__, __date__, __updated__
from ssea.config import Config
from ssea.base import SampleSet, WeightVector
from ssea.algo import ssea_main

# default command line options
DEFAULT_SMIN = 10
DEFAULT_SMAX = 0
DEFAULT_METACOLS = None
DEFAULT_NA_VALUE = 'NA'

def main(argv=None):
    '''Command line options.'''    
    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%s %s (%s)' % (program_name, program_version, program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

  Created by mkiyer and yniknafs on %s.
  Copyright 2013 MCTP. All rights reserved.
  
  Licensed under the GPL
  http://www.gnu.org/licenses/gpl.html
  
  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

    # create instance of run configuration
    config = Config()
    # Setup argument parser
    parser = argparse.ArgumentParser(description=program_license)
    # Add command line parameters
    config.get_argument_parser(parser)
    parser.add_argument("-v", "--verbose", dest="verbose", 
                        action="store_true", default=False, 
                        help="set verbosity level [default: %(default)s]")
    parser.add_argument('-V', '--version', action='version', 
                        version=program_version_message)
    parser.add_argument('--smin', dest="sample_set_size_min", type=int,
                        default=DEFAULT_SMIN, metavar="N",
                        help='Exclude sample sets smaller than N '
                        'from the analysis')
    parser.add_argument('--smax', dest="sample_set_size_max", type=int,
                        default=DEFAULT_SMAX, metavar="N",
                        help='Exclude sample sets larger than N '
                        'from the analysis')
    parser.add_argument('--smx', dest="smx_files", action='append',
                        help='File(s) containing sets in column format')
    parser.add_argument('--smt', dest="smt_files", action='append',
                        help='File(s) containing sets in row format')
    parser.add_argument('--metacols', type=int, dest='num_metadata_cols',
                        default=DEFAULT_METACOLS,
                        help='Number of columns of metadata in weight '
                        'matrix file [default=%(default)s]')
    parser.add_argument('--na-value', dest='na_value', 
                        default=DEFAULT_NA_VALUE,
                        help='Value to interpret as missing/invalid '
                        'in weight matrix [default=%(default)s]')
    parser.add_argument('weight_matrix_file', 
                        help='File containing weight matrix')
    # Process arguments
    args = parser.parse_args()
    # setup logging
    if DEBUG or (args.verbose > 0):
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(level=level,
                        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    # initialize configuration
    config.parse_args(parser, args)
    config.log()
    # check sample sets
    smx_files = []
    if args.smx_files is not None:
        for filename in args.smx_files:
            if not os.path.exists(filename):
                parser.error("smx file '%s' not found" % (filename))
            smx_files.append(filename)
    smt_files = []
    if args.smt_files is not None:
        for filename in args.smt_files:
            if not os.path.exists(filename):
                parser.error("smt file '%s' not found" % (filename))
            smt_files.append(filename)
    # check weights file
    if not os.path.exists(args.weight_matrix_file):
        parser.error("weight matrix file '%s' not found" % 
                     (args.weight_matrix_file))
    # read sample sets
    logging.info("Reading sample sets")
    sample_sets = []
    for filename in smx_files:
        logging.debug("\tFile: %s" % (filename))
        sample_sets.extend(SampleSet.parse_smx(filename))
    for filename in smt_files:
        logging.debug("\tFile: %s" % (filename))
        sample_sets.extend(SampleSet.parse_smt(filename))
    logging.info("\tNumber of sample sets: %d" % (len(sample_sets)))
    filtered_sample_sets = []
    for sample_set in sample_sets:
        if ((args.sample_set_size_min > 0) and
            (len(sample_set.value) < args.sample_set_size_min)):
            logging.warning("\tsample set %s excluded because size %d < %d" %                              
                            (sample_set.name, len(sample_set.value), 
                             args.sample_set_size_min))
            continue        
        if ((args.sample_set_size_max > 0) and 
            (len(sample_set.value) > args.sample_set_size_max)):
            logging.warning("\tsample set %s excluded because size %d > %d" % 
                            (sample_set.name, len(sample_set.value), 
                             args.sample_set_size_max))
            continue
        logging.debug("\tsample set %s size %d" % (sample_set.name, len(sample_set)))
        filtered_sample_sets.append(sample_set)
    logging.info("\tNumber of filtered sample sets: %d" % (len(filtered_sample_sets)))
    sample_sets = filtered_sample_sets
    # parse weight matrix file
    weight_vec_iter = WeightVector.parse_wmt(args.weight_matrix_file, 
                                             na_value=args.na_value,
                                             metadata_cols=args.num_metadata_cols)
    # run
    ssea_main(weight_vec_iter, sample_sets, config)
    return 0

if __name__ == "__main__":
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.bin'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())