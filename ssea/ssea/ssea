#!/bin/env python2.7
# encoding: utf-8
'''
 -- Sample Set Enrichment Analysis (SSEA) --

Assessment of enrichment in a ranked list of quantitative measurements 

@author:     mkiyer
@author:     yniknafs
        
@copyright:  2013 Michigan Center for Translational Pathology. All rights reserved.
        
@license:    GPL2

@contact:    mkiyer@umich.edu
@deffield    updated: Updated
'''
# set matplotlib backend
import matplotlib
matplotlib.use('Agg')

import sys
import os
import argparse
import logging
import json
import matplotlib.pyplot as plt

__all__ = []

# local imports
from ssea import __version__, __date__, __updated__
from ssea.config import Config
from ssea.base import SampleSet, WeightMatrix
from ssea.algo import ssea_run 

# header fields for report
HEADER_FIELDS = ['observation_name', 
                 'observation_desc',
                 'sample_set_name',
                 'sample_set_desc',
                 'sample_set_size',
                 'es',
                 'nes',
                 'nominal_p_value',
                 'fdr_q_value',
                 'fwer_p_value',
                 'rank_at_max',
                 'leading_edge_size',
                 'leading_edge_sample_set_frac',
                 'leading_edge_signal',
                 'leading_edge_noise',
                 'details']

DEBUG = 1
TESTRUN = 0
PROFILE = 1

class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "ERROR: %s" % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def create_detailed_report(wobj, res, config):
    # only create detailed report if pvalue less than threshold
    if res.qval > config.plot_qval_threshold:
        return None
    d = res.get_details()
    # create enrichment plot
    efig = res.plot(plot_conf_int=config.plot_conf_int,
                    conf_int=config.conf_int)    
    # create null distribution plot
    nfig = res.plot_null_distribution()
    if config.plot_png:
        eplot_png = '%s.%s.eplot.png' % (wobj.name, res.sample_set.name)
        nplot_png = '%s.%s.null.png' % (wobj.name, res.sample_set.name)
        efig.savefig(os.path.join(config.details_dir, eplot_png))
        nfig.savefig(os.path.join(config.details_dir, nplot_png))
        d.update({'eplot_png': eplot_png,
                  'nplot_png': nplot_png})
    if config.plot_pdf:
        eplot_pdf = '%s.%s.eplot.pdf' % (wobj.name, res.sample_set.name)
        nplot_pdf = '%s.%s.null.pdf' % (wobj.name, res.sample_set.name)
        efig.savefig(os.path.join(config.details_dir, eplot_pdf))
        nfig.savefig(os.path.join(config.details_dir, nplot_pdf))
        d.update({'eplot_pdf': eplot_pdf,
                  'nplot_pdf': nplot_pdf})
    plt.close()
    # write details
    details_tsv = '%s.%s.tsv' % (wobj.name, res.sample_set.name)
    fp = open(os.path.join(config.details_dir, details_tsv), 'w')
    json.dump(d, fp)
    fp.close()
    return details_tsv

def ssea_main(config):
    # read sample sets
    logging.info("Reading sample sets")
    sample_sets = []
    for filename in config.smx_files:
        logging.debug("\tFile: %s" % (filename))
        sample_sets.extend(SampleSet.parse_smx(filename))
    for filename in config.smt_files:
        logging.debug("\tFile: %s" % (filename))
        sample_sets.extend(SampleSet.parse_smt(filename))
    logging.info("\tNumber of sample sets: %d" % (len(sample_sets)))
    filtered_sample_sets = []
    for sample_set in sample_sets:
        logging.debug("\tsample Set %s size %d" % (sample_set.name, len(sample_set)))
        if ((config.sample_set_size_min > 0) and
            (len(sample_set.value) < config.sample_set_size_min)):
            logging.warning("\tsample set %s excluded because size %d < %d" %                              
                            (sample_set.name, len(sample_set.value), 
                             config.sample_set_size_min))
            continue        
        if ((config.sample_set_size_max > 0) and 
            (len(sample_set.value) > config.sample_set_size_max)):
            logging.warning("\tsample set %s excluded because size %d > %d" % 
                            (sample_set.name, len(sample_set.value), 
                             config.sample_set_size_max))
            continue
        filtered_sample_sets.append(sample_set)
    logging.info("\tNumber of filtered sample sets: %d" % (len(filtered_sample_sets)))
    sample_sets = filtered_sample_sets
    # setup output directory
    if not os.path.exists(config.output_dir):
        logging.info("Creating output directory '%s'" % 
                     (config.output_dir))
        os.makedirs(config.output_dir)
    if not os.path.exists(config.details_dir):
        logging.debug("\tCreating details directory '%s'" % 
                      (config.details_dir))
        os.makedirs(config.details_dir)
    # parse weight matrix and run main ssea algorithm
    logging.info("Running SSEA")
    fp = open(os.path.join(config.output_dir, 'out.tsv'), 'w')
    print >>fp, '\t'.join(HEADER_FIELDS)
    for wobj in WeightMatrix.parse_wmt(config.weight_matrix_file):
        logging.info("\tName: %s (%s)" % (wobj.name, wobj.desc))
        results = ssea_run(wobj.samples, wobj.weights, sample_sets, 
                           weight_method_miss=config.weight_miss,
                           weight_method_hit=config.weight_hit,
                           perms=config.perms)
        for res in results:
            # create detailed report
            details = create_detailed_report(wobj, res, config)
            # calculate leading edge stats
            member_inds = (res.membership > 0).nonzero()[0]
            le_size = sum(ind <= res.es_run_ind 
                          for ind in member_inds)
            le_frac = float(le_size) / len(res.sample_set)
            if res.es_run_ind == 0:
                le_signal = 0.0
            else:
                le_signal = float(le_size) / res.es_run_ind
            le_noise = (float(res.es_run_ind - le_size) / 
                        (len(wobj.weights) - len(res.sample_set)))
            # write result to text file            
            fields = [wobj.name, wobj.desc,
                      res.sample_set.name, res.sample_set.desc, 
                      len(res.sample_set), res.es, res.nes, res.pval, 
                      res.qval, res.fwerp, res.es_run_ind,
                      le_size, le_frac, le_signal, le_noise, details]
            print >>fp, '\t'.join(map(str,fields))
    # output to text file
    fp.close()


def main(argv=None):
    '''Command line options.'''    
    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%s %s (%s)' % (program_name, program_version, program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

  Created by mkiyer and yniknafs on %s.
  Copyright 2013 MCTP. All rights reserved.
  
  Licensed under the GPL
  http://www.gnu.org/licenses/gpl.html
  
  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

    # create instance of run configuration
    config = Config()
    config.version = program_version_message
    try:
        # Setup argument parser
        parser = argparse.ArgumentParser(description=program_license)
        # Add command line parameters
        config.get_argument_parser(parser)
        parser.add_argument("-v", "--verbose", dest="verbose", 
                            action="store_true", default=False, 
                            help="set verbosity level [default: %(default)s]")
        parser.add_argument('-V', '--version', action='version', 
                            version=program_version_message)
        # Process arguments
        args = parser.parse_args()
        # setup logging
        if DEBUG or (args.verbose > 0):
            level = logging.DEBUG
        else:
            level = logging.INFO
        logging.basicConfig(level=level,
                            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        # initialize configuration
        config.parse_args(parser, args)
        config.log()
        # run
        ssea_main(config)
    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        pass
#     except Exception, e:
#         pass
#         if DEBUG or TESTRUN:
#             raise(e)
#         indent = len(program_name) * " "
#         logging.error(program_name + ": " + repr(e) + "\n")
#         logging.error(indent + "  for help use --help")
#         return 2
    return 0

if __name__ == "__main__":
    if DEBUG:
        pass
    if TESTRUN:
        pass
        #import doctest
        #doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.bin'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())